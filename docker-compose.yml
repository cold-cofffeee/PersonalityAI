# PersonalityAI Docker Compose Configuration
version: '3.8'

services:
  # Main application service
  personalityai:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: personalityai-app
    ports:
      - "8000:8000"
    environment:
      # Load from .env file
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8000
      - ENVIRONMENT=production
      - DEBUG_MODE=false
      - ENABLE_LOGGING=true
      - CACHE_DIR=/app/cache
      - LOG_RETENTION_DAYS=30
      - RATE_LIMIT_RPM=60
      - MAX_TEXT_LENGTH=10000
      - MIN_TEXT_LENGTH=50
    volumes:
      # Persist cache and logs
      - ./cache:/app/cache
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.personalityai.rule=Host(`personalityai.localhost`)"
      - "traefik.http.services.personalityai.loadbalancer.server.port=8000"

  # Development service (optional)
  personalityai-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: personalityai-dev
    ports:
      - "8001:8000"
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8000
      - ENVIRONMENT=development
      - DEBUG_MODE=true
      - ENABLE_LOGGING=true
    volumes:
      # Mount source code for development
      - .:/app
      - ./cache:/app/cache
      - ./logs:/app/logs
    command: ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    restart: unless-stopped
    profiles: ["dev"]

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: personalityai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - personalityai
    restart: unless-stopped
    profiles: ["nginx"]

  # Redis for caching (optional enhancement)
  redis:
    image: redis:7-alpine
    container_name: personalityai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    profiles: ["redis"]
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-personalityai123}

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: personalityai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles: ["monitoring"]

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: personalityai-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles: ["monitoring"]

# Named volumes for data persistence
volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Networks
networks:
  default:
    driver: bridge